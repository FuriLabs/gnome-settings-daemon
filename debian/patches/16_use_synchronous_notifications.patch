Index: gnome-settings-daemon-2.29.5/plugins/common/Makefile.am
===================================================================
--- gnome-settings-daemon-2.29.5.orig/plugins/common/Makefile.am	2010-01-12 15:51:57.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/common/Makefile.am	2010-01-18 03:59:55.000000000 +0000
@@ -1,3 +1,5 @@
+INCLUDES = \
+	-DPACKAGE_NAME=\""$(PACKAGE_NAME)"\"
 
 noinst_LTLIBRARIES = libcommon.la
 
@@ -7,7 +9,9 @@
 	gsd-keygrab.c		\
 	gsd-keygrab.h		\
 	gsd-osd-window.c	\
-	gsd-osd-window.h
+	gsd-osd-window.h	\
+	gsd-osd-notification.c	\
+	gsd-osd-notification.h
 
 libcommon_la_CPPFLAGS = \
 	$(AM_CPPFLAGS)
Index: gnome-settings-daemon-2.29.5/plugins/common/gsd-osd-notification.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/common/gsd-osd-notification.c	2010-01-18 03:59:55.000000000 +0000
@@ -0,0 +1,144 @@
+/* -*- Mode: C; indent-tabs-mode: nil; c-basic-offset: 8; tab-width: 8 -*-
+ *
+ * Copyright (C) 2009 Canonical Ltd
+ * Copyright (C) 2010 Chris Coulson <chrisccoulson@ubuntu.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#include <libnotify/notify.h>
+#include "gsd-osd-notification.h"
+
+#define NOTIFY_CAP_PRIVATE_SYNCHRONOUS "x-canonical-private-synchronous"
+#define NOTIFY_CAP_PRIVATE_ICON_ONLY "x-canonical-private-icon-only"
+#define NOTIFY_HINT_TRUE "true"
+
+static gboolean
+_synchronous_is_supported (void)
+{
+        GList *caps;
+        gboolean has_cap;
+
+        caps = notify_get_server_caps ();
+        has_cap = (g_list_find_custom (caps, NOTIFY_CAP_PRIVATE_SYNCHRONOUS, (GCompareFunc) g_strcmp0) != NULL);
+        g_list_foreach (caps, (GFunc) g_free, NULL);
+        g_list_free (caps);
+
+        return has_cap;
+}
+
+GQuark
+gsd_osd_notification_error_quark (void)
+{
+        return g_quark_from_static_string ("gsd-osd-notification-error-quark");
+}
+
+gboolean
+gsd_osd_notification_notify (const char *icon,
+                             const char *hint,
+                             GError    **error)
+{
+        NotifyNotification *notification;
+        GError *tmp_error = NULL;
+        gboolean ret = FALSE;     
+
+        g_return_val_if_fail (icon != NULL, FALSE);
+        g_return_val_if_fail (hint != NULL, FALSE);
+
+        if (!notify_is_initted ())
+                notify_init (PACKAGE_NAME);
+
+        if (!_synchronous_is_supported ()) {
+                g_set_error (error, GSD_OSD_NOTIFICATION_ERROR, 
+                             GSD_OSD_NOTIFICATION_SYNC_NOT_SUPPORTED,
+                             "The notification server does not support the \"" \
+                             NOTIFY_CAP_PRIVATE_SYNCHRONOUS "\" capability");
+                goto out;
+        }
+
+        notification = notify_notification_new (" ", "", icon, NULL);
+        if (notification == NULL) {
+                g_set_error (error, GSD_OSD_NOTIFICATION_ERROR,
+                             GSD_OSD_NOTIFICATION_GENERIC_ERROR,
+                             "Failed to create a NotifyNotification instance");
+                goto out;
+        }
+        notify_notification_set_hint_string (notification, NOTIFY_CAP_PRIVATE_SYNCHRONOUS, hint);
+        notify_notification_set_hint_string (notification, NOTIFY_CAP_PRIVATE_ICON_ONLY, NOTIFY_HINT_TRUE);
+
+        if (!notify_notification_show (notification, &tmp_error)) {
+                g_propagate_error (error, tmp_error);
+                goto out;
+        }
+
+        ret = TRUE;
+out:
+        if (notification != NULL)
+                g_object_unref (notification);
+
+        return ret;
+}
+
+gboolean
+gsd_osd_notification_notify_value (const char *icon,
+                                   const char *hint,
+                                   int         value,
+                                   GError    **error)
+{
+        NotifyNotification *notification;
+        GError *tmp_error = NULL;
+        gboolean ret = FALSE;
+
+        g_return_val_if_fail (icon != NULL, FALSE);
+        g_return_val_if_fail (hint != NULL, FALSE);
+
+        if (!notify_is_initted ())
+                notify_init (PACKAGE_NAME);
+
+        if (!_synchronous_is_supported ()) {
+                g_set_error (error, GSD_OSD_NOTIFICATION_ERROR, 
+                             GSD_OSD_NOTIFICATION_SYNC_NOT_SUPPORTED,
+                             "The notification server does not support the \"" \
+                             NOTIFY_CAP_PRIVATE_SYNCHRONOUS "\" capability");
+                goto out;
+        }
+
+        notification = notify_notification_new (" ", "", icon, NULL);
+        if (notification == NULL) {
+                g_set_error (error, GSD_OSD_NOTIFICATION_ERROR,
+                             GSD_OSD_NOTIFICATION_GENERIC_ERROR,
+                             "Failed to create a NotifyNotification instance");
+                goto out;
+        }
+
+        value = MIN (value, 101);
+        value = MAX (value, -1);
+
+        notify_notification_set_hint_string (notification, NOTIFY_CAP_PRIVATE_SYNCHRONOUS, hint);
+        notify_notification_set_hint_int32(notification, "value", value);
+
+        if (!notify_notification_show (notification, &tmp_error)) {
+                g_propagate_error (error, tmp_error);
+                goto out;
+        }
+
+        ret = TRUE;
+out:
+        if (notification != NULL)
+                g_object_unref (notification);
+
+        return ret;
+}
Index: gnome-settings-daemon-2.29.5/plugins/common/gsd-osd-notification.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/common/gsd-osd-notification.h	2010-01-18 03:59:55.000000000 +0000
@@ -0,0 +1,49 @@
+/* -*- Mode: C; indent-tabs-mode: nil; c-basic-offset: 8; tab-width: 8 -*-
+ *
+ * Copyright (C) 2009 Canonical Ltd
+ * Copyright (C) 2010 Chris Coulson <chrisccoulson@ubuntu.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+ 
+#ifndef GSD_OSD_NOTIFICATION_H
+#define GSD_OSD_NOTIFICATION_H
+
+#include <glib.h>
+
+G_BEGIN_DECLS
+
+typedef enum {
+        GSD_OSD_NOTIFICATION_GENERIC_ERROR,
+        GSD_OSD_NOTIFICATION_SYNC_NOT_SUPPORTED,
+} GsdOsdNotificationError;
+
+#define GSD_OSD_NOTIFICATION_ERROR (gsd_osd_notification_error_quark ())
+GQuark          gsd_osd_notification_error_quark  (void);
+
+gboolean        gsd_osd_notification_notify       (const char *icon,
+                                                   const char *hint,
+                                                   GError    **error);
+gboolean        gsd_osd_notification_notify_value (const char *icon,
+                                                   const char *hint,
+                                                   int         value,
+                                                   GError    **error);
+
+G_END_DECLS
+
+
+#endif
+
Index: gnome-settings-daemon-2.29.5/plugins/media-keys/gsd-media-keys-osd-notification.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/media-keys/gsd-media-keys-osd-notification.c	2010-01-18 03:59:56.000000000 +0000
@@ -0,0 +1,91 @@
+/* -*- Mode: C; indent-tabs-mode: nil; c-basic-offset: 8; tab-width: 8 -*-
+ *
+ * Copyright (C) 2009 Canonical Ltd
+ * Copyright (C) 2010 Chris Coulson <chrisccoulson@ubuntu.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+ 
+#include <gdk/gdkx.h>
+#include "acme.h"
+
+#include "gsd-osd-notification.h"
+
+static const char *icon_name[] = {
+        "notification-audio-volume-muted",
+        "notification-audio-volume-low",
+        "notification-audio-volume-medium",
+        "notification-audio-volume-high",
+        NULL
+};
+
+/* Warning: keep that in sync with the enum in action/acme.h */
+static const char *media_key_icon[] = {
+        NULL, /* MUTE_KEY */
+        NULL, /* VOLUME_DOWN_KEY */
+        NULL, /* VOLUME_UP_KEY */
+        NULL, /* POWER_KEY */
+        "notification-device-eject", /* EJECT_KEY */
+        NULL, /* HOME_KEY */
+        NULL, /* MEDIA_KEY */
+        NULL, /* CALCULATOR_KEY */
+        NULL, /* SEARCH_KEY */
+        NULL, /* EMAIL_KEY */
+        NULL, /* SCREENSAVER_KEY */
+        NULL, /* HELP_KEY */
+        NULL, /* WWW_KEY */
+        NULL, /* "notification-audio-play", */ /* PLAY_KEY */
+        NULL, /* "notification-audio-pause",*/ /* PAUSE_KEY */
+        NULL, /* STOP_KEY */
+        NULL, /* PREVIOUS_KEY */
+        NULL, /* NEXT_KEY */
+        NULL, /* HANDLED_KEYS */
+        NULL
+};
+
+gboolean
+gsd_media_keys_osd_notification_notify_volume (int value, gboolean muted)
+{
+        int icon;
+
+        if (value < 0) {
+                icon = 0;
+        } else {
+                icon = 3 * value / 100 + 1;
+                if (icon < 1)
+                        icon = 1;
+                if (icon > 3)
+                        icon = 3;
+        }
+
+        if (muted)
+                icon = 0;
+
+        return gsd_osd_notification_notify_value (icon_name[icon],
+                                                  "volume",
+                                                  value,
+                                                  NULL);
+}
+
+gboolean
+gsd_media_keys_osd_notification_notify (int key, const char *hint)
+{
+        g_return_val_if_fail (key < HANDLED_KEYS && key >= MUTE_KEY, FALSE);
+
+        return gsd_osd_notification_notify (media_key_icon[key],
+                                            hint,
+                                            NULL);
+}
Index: gnome-settings-daemon-2.29.5/plugins/media-keys/Makefile.am
===================================================================
--- gnome-settings-daemon-2.29.5.orig/plugins/media-keys/Makefile.am	2010-01-12 15:51:57.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/media-keys/Makefile.am	2010-01-18 03:59:56.000000000 +0000
@@ -32,6 +32,8 @@
 	gsd-media-keys-manager.c	\
 	gsd-media-keys-window.h		\
 	gsd-media-keys-window.c		\
+	gsd-media-keys-osd-notification.c	\
+	gsd-media-keys-osd-notification.h	\
 	acme.h				\
 	$(BUILT_SOURCES)		\
 	$(NULL)
@@ -47,9 +49,11 @@
 
 libmedia_keys_la_CFLAGS = \
 	$(SETTINGS_PLUGIN_CFLAGS)	\
+	$(LIBNOTIFY_CFLAGS)		\
 	$(AM_CFLAGS)
 
 libmedia_keys_la_LDFLAGS = 		\
+	$(LIBNOTIFY_LDFLAGS)		\
 	$(GSD_PLUGIN_LDFLAGS)
 
 libmedia_keys_la_LIBADD  = 		\
Index: gnome-settings-daemon-2.29.5/plugins/media-keys/gsd-media-keys-osd-notification.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/media-keys/gsd-media-keys-osd-notification.h	2010-01-18 03:59:56.000000000 +0000
@@ -0,0 +1,37 @@
+/* -*- Mode: C; indent-tabs-mode: nil; c-basic-offset: 8; tab-width: 8 -*-
+ *
+ * Copyright (C) 2009 Canonical Ltd
+ * Copyright (C) 2010 Chris Coulson <chrisccoulson@ubuntu.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ */
+
+#ifndef GSD_MEDIA_KEYS_OSD_NOTIFICATION_H
+#define GSD_MEDIA_KEYS_OSD_NOTIFICATION_H
+
+#include <glib.h>
+
+G_BEGIN_DECLS
+
+gboolean	gsd_media_keys_osd_notification_notify_volume   (int value,
+                                                                 gboolean muted);
+gboolean        gsd_media_keys_osd_notification_notify          (int key,
+                                                                 const char *hint);
+
+G_END_DECLS
+
+
+#endif
Index: gnome-settings-daemon-2.29.5/plugins/media-keys/gsd-media-keys-manager.c
===================================================================
--- gnome-settings-daemon-2.29.5.orig/plugins/media-keys/gsd-media-keys-manager.c	2010-01-12 15:51:57.000000000 +0000
+++ gnome-settings-daemon-2.29.5/plugins/media-keys/gsd-media-keys-manager.c	2010-01-18 04:00:35.000000000 +0000
@@ -49,6 +49,7 @@
 #include "eggaccelerators.h"
 #include "acme.h"
 #include "gsd-media-keys-window.h"
+#include "gsd-media-keys-osd-notification.h"
 
 #ifdef HAVE_PULSE
 #include <canberra-gtk.h>
@@ -589,11 +590,13 @@
 {
         char *command;
 
-        dialog_init (manager);
-        gsd_media_keys_window_set_action_custom (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog),
-                                                 "media-eject",
-                                                 FALSE);
-        dialog_show (manager);
+        if (!gsd_media_keys_osd_notification_notify (EJECT_KEY, "Eject")) {
+                dialog_init (manager);
+                gsd_media_keys_window_set_action_custom (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog),
+                                                         "media-eject",
+                                                         FALSE);
+                dialog_show (manager);
+        }
 
         command = gconf_client_get_string (manager->priv->conf_client,
                                            GCONF_MISC_DIR "/eject_command",
@@ -614,15 +617,17 @@
                gboolean muted)
 {
         vol = (int) (100 * (double) vol / PA_VOLUME_NORM);
-        vol = CLAMP (vol, 0, 100);
-
-        dialog_init (manager);
-        gsd_media_keys_window_set_volume_muted (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog),
-                                                muted);
-        gsd_media_keys_window_set_volume_level (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog), vol);
-        gsd_media_keys_window_set_action (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog),
-                                          GSD_MEDIA_KEYS_WINDOW_ACTION_VOLUME);
-        dialog_show (manager);
+        
+        if (!gsd_media_keys_osd_notification_notify_volume (vol, muted)) {
+                vol = CLAMP (vol, 0, 100);
+                dialog_init (manager);
+                gsd_media_keys_window_set_volume_muted (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog),
+                                                        muted);
+                gsd_media_keys_window_set_volume_level (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog), vol);
+                gsd_media_keys_window_set_action (GSD_MEDIA_KEYS_WINDOW (manager->priv->dialog),
+                                                  GSD_MEDIA_KEYS_WINDOW_ACTION_VOLUME);
+                dialog_show (manager);
+        }
 
         ca_gtk_play_for_widget (manager->priv->dialog, 0,
                                 CA_PROP_EVENT_ID, "audio-volume-change",
@@ -843,8 +848,10 @@
 
 static gboolean
 do_multimedia_player_action (GsdMediaKeysManager *manager,
+                             int                  type,
                              const char          *key)
 {
+        gsd_media_keys_osd_notification_notify (type, key);
         return gsd_media_player_key_pressed (manager, key);
 }
 
@@ -912,19 +919,19 @@
                 execute (manager, "gcalctool", FALSE, FALSE);
                 break;
         case PLAY_KEY:
-                return do_multimedia_player_action (manager, "Play");
+                return do_multimedia_player_action (manager, type, "Play");
                 break;
         case PAUSE_KEY:
-                return do_multimedia_player_action (manager, "Pause");
+                return do_multimedia_player_action (manager, type, "Pause");
                 break;
         case STOP_KEY:
-                return do_multimedia_player_action (manager, "Stop");
+                return do_multimedia_player_action (manager, type, "Stop");
                 break;
         case PREVIOUS_KEY:
-                return do_multimedia_player_action (manager, "Previous");
+                return do_multimedia_player_action (manager, type, "Previous");
                 break;
         case NEXT_KEY:
-                return do_multimedia_player_action (manager, "Next");
+                return do_multimedia_player_action (manager, type, "Next");
                 break;
         default:
                 g_assert_not_reached ();
